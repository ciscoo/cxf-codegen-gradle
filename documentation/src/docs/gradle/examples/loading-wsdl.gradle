// tag::code[]
import io.mateo.cxf.codegen.wsdl2java.Wsdl2Java
// end::code[]

plugins {
    id "java"
    id "io.mateo.cxf-codegen"
}

repositories {
    mavenCentral()
}

dependencies {
    cxfCodegen("jakarta.xml.ws:jakarta.xml.ws-api:2.3.3")
    cxfCodegen("jakarta.annotation:jakarta.annotation-api:1.3.5")
}


// tag::code[]

configurations {
    myConfiguration // <1>
}

dependencies {
    myConfiguration "org.apache.cxf:cxf-testutils:3.5.3" // <2>
}

def copyArtifact = tasks.register("copyArtifact", Copy) { // <3>
    from(configurations.myConfiguration) {
        include {
            it.name.startsWith("cxf-testutils")
        }
    }
    into(layout.buildDirectory.dir("copied-artifact"))
}

def extractWsdl = tasks.register("extractWsdl") { // <4>
    def wsdlFile = layout.buildDirectory.file("extracted.wsdl")
    inputs.files(copyArtifact)
    outputs.file(wsdlFile)
    doLast {
        // Assumes single JAR artifact from previous task
        def list = []
        inputs.files.singleFile.eachFileRecurse(groovy.io.FileType.FILES) { f -> list.add(f) }
        def archive = list.first()
        def textResource = resources.text.fromArchiveEntry(archive, "wsdl/calculator.wsdl")
        def f = wsdlFile.get().asFile
        f.createNewFile()
        f.write(textResource.asString())
    }
}

tasks.register("calculator", Wsdl2Java) { // <5>
    inputs.files(extractWsdl)
    toolOptions {
        wsdl.fileProvider(extractWsdl.map { it.outputs.files.singleFile })
    }
}
// end::code[]
